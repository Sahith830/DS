class Node:
    def __init__(self,data):
        self.data = data
        self.link = None
class SLL:
    def __init__(self):
        self.head = None
    
    def atBegin(self,data):
        t = Node(data)
        if(self.head == None):
            self.head = t
        else:
            t.link = self.head
            self.head = t
        self.display()
    def display(self):
        t = self.head
        while(not t == None):
            print(t.data,end= ' ')
            t = t.link
        print()
    def atEnd(self,data):
        t1 = Node(data)
        t = self.head
        while(t.link != None):
            t = t.link
        t.link = t1
        self.display()
        
    def beforeNode(self,key,data):
        k = Node(data)
        t = self.head
        if(self.head!=None and self.head.data == key):
            self.atBegin(data)
            return
        while(t!=None and t.link.data != key):
            t = t.link
        if(t==None):
            print("Key not found in current Linked List")
        else:
            k.link = t.link
            t.link = k
        self.display()
    def insertAfter(self,key,data):
        k = Node(data)
        t = self.head
        while(t!=None and t.data!=key):
            t = t.link
        if(t==None):
            print("Key not found in current Linked List")
        else:
            k.link = t.link
            t.link = k
        self.display()
    def delete(self,key):
        if(self.head == None):
            print("Linked List is Empty")
        else:
            t = self.head
            if(t.data == key):
                t = t.link
                self.head = t
            while(t.link!=None and t.link.data !=key):
                t=t.link
            if(t.link==None):
                print("Key not found to delete")
            else:
                t.link = t.link.link
            self.display()
n = SLL()
n.atBegin(10)
n.atBegin(20)
n.atBegin(30)
n.atBegin(40)
n.atBegin(50)
n.atEnd(60)
n.beforeNode(60,5)
n.beforeNode(50,5)
n.beforeNode(30,35)
n.insertAfter(20,15)
n.delete(15)
n.delete(60)
n.delete(5)
